{"ast":null,"code":"import _toConsumableArray from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Famille/Code-lab/vidly/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Famille/Code-lab/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport MoviesTable from \"./moviesTable\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nvar Movies =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Movies, _Component);\n\n  function Movies() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Movies);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Movies)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      movies: [],\n      genres: [],\n      pageSize: 4,\n      currentPage: 1,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    _this.updateMovie = function (movies, movieNew) {\n      // const { title, genre, numberInStock, rate, _id } = movieNew;\n      var movie = movies.find(function (m) {\n        return m._id === movieNew._id;\n      });\n      var index = movies.indexOf(movie);\n      movies[index] = movieNew;\n\n      _this.setState({\n        movies: movies\n      });\n    };\n\n    _this.addMovie = function (movies, movieNew) {\n      movieNew = _objectSpread({}, movieNew, {\n        liked: 0\n      });\n      movies[movies.length] = movieNew;\n      console.log(\"movies\", movies);\n\n      _this.setState({\n        movies: movies\n      });\n    };\n\n    _this.handleDelete = function (movie) {\n      var movies = _this.state.movies.filter(function (m) {\n        return m._id !== movie._id;\n      });\n\n      _this.setState({\n        movies: movies\n      });\n    };\n\n    _this.handleLiked = function (movie) {\n      var movies = _toConsumableArray(_this.state.movies);\n\n      var index = movies.indexOf(movie);\n      movies[index] = _objectSpread({}, movie);\n      movies[index].liked = !movies[index].liked;\n\n      _this.setState({\n        movies: movies\n      });\n    };\n\n    _this.handlePageChange = function (page) {\n      _this.setState({\n        currentPage: page\n      });\n    };\n\n    _this.handleGenreSelect = function (genre) {\n      _this.setState({\n        selectedGenre: genre,\n        currentPage: 1\n      });\n    };\n\n    _this.handleSort = function (sortColumn) {\n      _this.setState({\n        sortColumn: sortColumn\n      });\n    };\n\n    _this.getPagedData = function () {\n      var _this$state = _this.state,\n          pageSize = _this$state.pageSize,\n          currentPage = _this$state.currentPage,\n          allMovies = _this$state.movies,\n          selectedGenre = _this$state.selectedGenre,\n          sortColumn = _this$state.sortColumn;\n      var filtered = selectedGenre && selectedGenre._id ? allMovies.filter(function (m) {\n        return m.genre._id === selectedGenre._id;\n      }) : allMovies;\n\n      var sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      var movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Movies, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var genres = [{\n        _id: \"\",\n        name: \"All Genre\"\n      }].concat(_toConsumableArray(getGenres()));\n      var movies = getMovies();\n      var locState = this.props.location.state;\n\n      if (locState) {\n        var movie = locState.movie;\n        if (movie._id === \"new\") this.addMovie(movies, movie);else {\n          this.updateMovie(movies, movie);\n        }\n      } else this.setState({\n        movies: movies\n      });\n\n      this.setState({\n        genres: genres,\n        selectedGenre: genres[0]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var count = this.state.movies.length;\n      var _this$state2 = this.state,\n          pageSize = _this$state2.pageSize,\n          currentPage = _this$state2.currentPage,\n          genres = _this$state2.genres,\n          selectedGenre = _this$state2.selectedGenre,\n          sortColumn = _this$state2.sortColumn;\n      if (!count) return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"No movie in database\");\n\n      var _this$getPagedData = this.getPagedData(),\n          totalCount = _this$getPagedData.totalCount,\n          movies = _this$getPagedData.data;\n\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(ListGroup, {\n        items: genres,\n        selectedItem: selectedGenre,\n        onItemSelect: this.handleGenreSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/movies/new\",\n        className: \"btn btn-primary\",\n        style: {\n          marginBottom: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"New Movie\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Showing \", totalCount, \" movies in the database\"), React.createElement(\"main\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(MoviesTable, {\n        onDelete: this.handleDelete,\n        onLiked: this.handleLiked,\n        onSort: this.handleSort,\n        sortColumn: sortColumn,\n        movies: movies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Pagination, {\n        itemsCount: totalCount,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        onPageChange: this.handlePageChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Movies;\n}(Component);\n\nexport default Movies;","map":{"version":3,"sources":["/Users/Famille/Code-lab/vidly/src/components/movies.jsx"],"names":["React","Component","MoviesTable","getMovies","Pagination","paginate","ListGroup","getGenres","_","Link","Movies","state","movies","genres","pageSize","currentPage","sortColumn","path","order","updateMovie","movieNew","movie","find","m","_id","index","indexOf","setState","addMovie","liked","length","console","log","handleDelete","filter","handleLiked","handlePageChange","page","handleGenreSelect","genre","selectedGenre","handleSort","getPagedData","allMovies","filtered","sorted","orderBy","totalCount","data","name","locState","props","location","count","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MoviesTable from \"./moviesTable\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    pageSize: 4,\n    currentPage: 1,\n    sortColumn: { path: \"title\", order: \"asc\" }\n  };\n\n  componentWillMount() {\n    const genres = [{ _id: \"\", name: \"All Genre\" }, ...getGenres()];\n    const movies = getMovies();\n    const { state: locState } = this.props.location;\n    if (locState) {\n      const { movie } = locState;\n      if (movie._id === \"new\") this.addMovie(movies, movie);\n      else {\n        this.updateMovie(movies, movie);\n      }\n    } else this.setState({ movies });\n    this.setState({ genres, selectedGenre: genres[0] });\n  }\n\n  updateMovie = (movies, movieNew) => {\n    // const { title, genre, numberInStock, rate, _id } = movieNew;\n    const movie = movies.find(m => m._id === movieNew._id);\n    const index = movies.indexOf(movie);\n    movies[index] = movieNew;\n    this.setState({ movies });\n  };\n\n  addMovie = (movies, movieNew) => {\n    movieNew = { ...movieNew, liked: 0 };\n    movies[movies.length] = movieNew;\n    console.log(\"movies\", movies);\n    this.setState({ movies });\n  };\n\n  handleDelete = movie => {\n    const movies = this.state.movies.filter(m => m._id !== movie._id);\n    this.setState({ movies });\n  };\n\n  handleLiked = movie => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movie };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = page => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = genre => {\n    this.setState({ selectedGenre: genre, currentPage: 1 });\n  };\n\n  handleSort = sortColumn => {\n    this.setState({ sortColumn });\n  };\n\n  getPagedData = () => {\n    const {\n      pageSize,\n      currentPage,\n      movies: allMovies,\n      selectedGenre,\n      sortColumn\n    } = this.state;\n    const filtered =\n      selectedGenre && selectedGenre._id\n        ? allMovies.filter(m => m.genre._id === selectedGenre._id)\n        : allMovies;\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    const movies = paginate(sorted, currentPage, pageSize);\n    return { totalCount: filtered.length, data: movies };\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      genres,\n      selectedGenre,\n      sortColumn\n    } = this.state;\n\n    if (!count) return <h3>No movie in database</h3>;\n    const { totalCount, data: movies } = this.getPagedData();\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ListGroup\n            items={genres}\n            selectedItem={selectedGenre}\n            onItemSelect={this.handleGenreSelect}\n          />\n        </div>\n        <div className=\"col\">\n          <Link\n            to=\"/movies/new\"\n            className=\"btn btn-primary\"\n            style={{ marginBottom: 20 }}>\n            New Movie\n          </Link>\n          <h3>Showing {totalCount} movies in the database</h3>\n          <main className=\"container\">\n            <MoviesTable\n              onDelete={this.handleDelete}\n              onLiked={this.handleLiked}\n              onSort={this.handleSort}\n              sortColumn={sortColumn}\n              movies={movies}\n            />\n            <Pagination\n              itemsCount={totalCount}\n              pageSize={pageSize}\n              currentPage={currentPage}\n              onPageChange={this.handlePageChange}\n            />\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}